services:
  nginx:
    container_name: nginx
    env_file:
      - .env
    image: nginx:1.24
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./wp:/var/www/html/wp
      - ./wp-content/plugins/wp-woocommerce-printify-sync:/var/www/html/wp-content/plugins/wp-woocommerce-printify-sync
      - ./wp-config.php:/var/www/html/wp-config.php
      - ./wp-config.php:/var/www/html/index.php
    depends_on:
      php-fpm:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - WP_HOME=${WP_HOME}
      - WP_SITEURL=${WP_SITEURL}

  php-fpm:
    container_name: php-fpm
    env_file:
      - .env
    image: robowen1972/wp-woocommerce-printify-sync:latest
    volumes:
     - ./php/php.ini:/usr/local/etc/php/php.ini
     - ./php/php-fpm.conf:/usr/local/etc/php-fpm.conf
     - ./wp:/var/www/html/wp
     - ./wp-content/plugins/wp-woocommerce-printify-sync:/var/www/html/wp-content/plugins/wp-woocommerce-printify-sync
     - ./wp-config.php:/var/www/html/wp-config.php
     - ./wp-config.php:/var/www/html/index.php
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    environment:
      - WORDPRESS_DATABASE_HOST=${WP_DB_HOST}
      - WORDPRESS_DATABASE_USER=${WP_DB_USER}
      - WORDPRESS_DATABASE_PASSWORD=${WP_DB_PASSWORD}
      - WORDPRESS_DATABASE_NAME=${WP_DB_NAME}
      - WORDPRESS_TABLE_PREFIX=${WP_TABLE_PREFIX}
      - WORDPRESS_BLOG_NAME=${WP_BLOG_NAME}
      - WORDPRESS_LOCALE=${WP_LOCALE}
      - WORDPRESS_ENABLE_REDIS_CACHE=${WP_ENABLE_REDIS_CACHE}
      - WORDPRESS_USERNAME=${WP_ADMIN_USER}
      - WORDPRESS_PASSWORD=${WP_ADMIN_PASS}
      - WORDPRESS_EMAIL=${WP_ADMIN_EMAIL}
      - WORDPRESS_FIRST_NAME=${WP_ADMIN_FIRSTNAME}
      - WORDPRESS_LAST_NAME=${WP_ADMIN_LASTNAME}
      - WORDPRESS_SMTP_HOST=${SMTP_HOST}
      - WORDPRESS_SMTP_PORT=${SMTP_PORT}
      - WORDPRESS_SMTP_USER=${SMTP_USERNAME}
      - WORDPRESS_SMTP_PASSWORD=${SMTP_PASSWORD}
      - WORDPRESS_SMTP_PROTOCOL=${SMTP_PROTOCOL}

  mariadb:
    container_name: mariadb
    env_file:
      - .env
    image: mariadb:10.11
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${WP_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WP_DB_NAME}
      MYSQL_USER: ${WP_DB_USER}
      MYSQL_PASSWORD: ${WP_DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./mariadb/my.cnf:/etc/mysql/my.cnf
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${WP_DB_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3

  ngrok:
    image: wernight/ngrok:latest
    container_name: ngrok
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
      - NGROK_DOMAIN=${NGROK_DOMAIN}
    depends_on:
      - nginx
    env_file:
      - .env
    command: ["ngrok", "http", "--domain=${NGROK_DOMAIN}", "nginx:80"]

  phpmyadmin:
    container_name: phpmyadmin
    env_file:
      - .env
    image: phpmyadmin/phpmyadmin:latest
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: ${WP_DB_HOST}
      MYSQL_ROOT_PASSWORD: ${WP_DB_ROOT_PASSWORD}
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - app_network

  redis:
    container_name: redis
    env_file:
      - .env
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=30

networks:
  app_network:
    driver: bridge

volumes:
  db_data:
  redis_data:
